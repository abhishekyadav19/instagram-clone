import React, { useEffect, useRef, useState } from 'react'
import { createContext } from "react";
import { firebase, db, storage, auth } from "../../../utils/firebase/firebase.config"


const usercontext = createContext()
const today = new Date().toLocaleString();

const Context = ({ children }) => {
    // const [progress, setProgress] = useState(0);
    const [username, setUsername] = useState("")
    const [image, setImage] = useState("")
    const [posts, setPosts] = useState([])
    const [email, setEmail] = useState("")
    const [password, setPassword] = useState("")
    const [user, setUser] = useState({});
    const [profile, setProfile] = useState("https://source.unsplash.com/user/c_v_r/100x100")



    const signup = (email, password) => {
        auth.createUserWithEmailAndPassword(email, password)
            .then((authUser) => {
                authUser.user.updateProfile({
                    displayName: username,
                });
            })
    }

    const login = (email, password) => {
        return auth.signInWithEmailAndPassword(email, password)
    }
    useEffect(() => {
        const unsubscribe = auth.onAuthStateChanged((user) => {
            if (user) {
                setUser(user)
            } else {
                setUser("")
            }
        })
        return () => {
            unsubscribe()
        }
    }, [])



    // const handleSignUp = () => {
    //     console.log("handling sign up");
    //     auth.createUserWithEmailAndPassword(email, password, auth, username)
    //         .then((authUser) => {
    //             authUser.user.updateProfile({
    //                 displayName: username,
    //             });
    //         })
    //         .catch((error) => {
    //             alert(error.message);
    //         });
    //     navigate("/")
    // };

    const publishComment = (data) => {
        const { id, comment } = data;
        db.collection("posts").doc(id).collection("comments").add({
            comment,
            username: user.displayName,
            currentTime: firebase.firestore.FieldValue.serverTimestamp(),
        });
    };


    // fetch the posts and their id(that is generated by firebase) from database
    useEffect(() => {
        db.collection("posts")
            .orderBy("timestamp", "desc")
            .onSnapshot((snapshot) => {
                setPosts(snapshot.docs.map((doc) =>
                ({
                    id: doc.id,
                    caption: doc.data().caption,
                    files: doc.data().files,
                    username: doc.data().username,
                    today: doc.data().time,
                    fileype: doc.data().fileype,
                })));
            });
    }, []);

    const create = (data) => {
        const { title, image } = data;
        // create a new storage ref with the name of the image
        const upload = storage.ref(`images/${image.name}`).put(image);

        // get the progress of the uploading image
        upload.on(
            "state_changed",
            (snp) => {
                let progress = (snp.bytesTransferred / snp.totalBytes) * 100;
                console.log(progress);
            },
            (err) => {
                console.log(err);
            },
            () => {
                //success function/complete function
                storage
                    .ref("images")
                    .child(image.name)
                    .getDownloadURL()
                    .then((url) => {
                        // post the image + data to firebase
                        db.collection("posts").add({
                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                            caption: title,
                            files: url,
                            username: user.displayName,
                            fileype: image.type,
                            time: today,
                        });
                    });
            }
        );
    };
    return (
        <>
            <usercontext.Provider value={{ profile, setProfile, user, login, signup, email, password, setPassword, setEmail, username, setUsername, image, setImage, publishComment, posts, create }}>
                {children}
            </usercontext.Provider>
        </>
    )
}
export default Context
export { usercontext };

